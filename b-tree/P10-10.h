/*	==================== _delete ==================== 	Delete entry with key dltKey from B-Tree 	   Pre    tree must be initialized--Null tree OK 	          root is pointer to tree or subtree	          dltKey is key of entry to be deleted	          success indicates entry deleted or failed	   Post   node is deleted and its space recycled	          -or- if key not found, tree is unchanged.	          success is true / false	   Return underflow true / false */bool _delete (BTREE* tree,        NODE* root,               void*  dltKeyPtr,   bool* success){// Local Definitions 	NODE* leftPtr;	NODE* subTreePtr;	int   entryNdx;	int   underflow;//	Statements 	if (!root)	   {	    *success = false;	    return     false;	   } // null tree 	entryNdx  = _searchNode (tree, root, dltKeyPtr);	if (tree->compare(dltKeyPtr, 	    root->entries[entryNdx].dataPtr) == 0)	    {	     // found entry to be deleted 	     *success = true;	     if (root->entries[entryNdx].rightPtr == NULL)	         // entry is a leaf node 	         underflow = _deleteEntry (root, entryNdx);	     else	         // entry is in an internal node 	         {	          if (entryNdx > 0)	             leftPtr = 	                root->entries[entryNdx - 1].rightPtr;	          else	             leftPtr = root->firstPtr;	          underflow = _deleteMid 	               (root, entryNdx, leftPtr);	          if (underflow)	             underflow = _reFlow (root, entryNdx);	         } // else internal node 	    } // else found entry 	else	    {	     if (tree->compare (dltKeyPtr, 	            root->entries[0].dataPtr) < 0)	         // delete key < first entry 	         subTreePtr = root->firstPtr;	     else	         // delete key in right subtree 	         subTreePtr = root->entries[entryNdx].rightPtr;	         	     underflow = _delete (tree,      subTreePtr, 	                          dltKeyPtr, success);   	     if (underflow)	         underflow = _reFlow (root, entryNdx);	    } // else not found *	return underflow;}	// _delete 