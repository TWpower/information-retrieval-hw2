/*	================= _search ================= 	Search tree for node containing requested	key and returns its data to the calling function.	   Pre    BTree_Search passes tree, targetPtr, root	          targetPtr is pointer to data structure 	             containing key to be located 	   Post   Tree searched and data pointer returned 	   Return Address of matching node returned. 	          If not found, NULL returned.*/void* _search (BTREE* tree, void* targetPtr,               NODE*  root){//	Local Definitions 	int   entryNo;	// Statements 	if (!root)	   return NULL;		if (tree->compare(targetPtr, 	                  root->entries[0].dataPtr) < 0)	    return _search (tree, 	                    targetPtr,	                    root->firstPtr);	entryNo = root->numEntries - 1;	while (tree->compare(targetPtr, 	                  root->entries[entryNo].dataPtr) < 0)	   entryNo--;	if (tree->compare(targetPtr, 	                  root->entries[entryNo].dataPtr) == 0)	    return (root->entries[entryNo].dataPtr);		return (_search (tree,	     targetPtr, root->entries[entryNo].rightPtr));}	// _search 