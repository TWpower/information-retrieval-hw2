/* 	================== BTree_Insert ==================	This function inserts new data into the tree.	   Pre  tree is pointer to valid B-Tree structure 	   Post data inserted or abort if memory O/F */void BTree_Insert (BTREE* tree, void* dataInPtr){//	Local Definitions 	bool  taller;	NODE* newPtr;	ENTRY upEntry;	//	Statements 	if (tree->root == NULL)	    // Empty Tree. Insert first node 	    if (newPtr = (NODE*)malloc(sizeof (NODE)))	       {	        newPtr->firstPtr            = NULL;	        newPtr->numEntries          = 1;	        newPtr->entries[0].dataPtr  = dataInPtr;	        newPtr->entries[0].rightPtr = NULL;	        tree->root                  = newPtr;	        (tree->count)++;	        	        for (int i = 1; i < ORDER - 1; i++)	            {	             newPtr->entries[i].dataPtr  = NULL;	             newPtr->entries[i].rightPtr = NULL;	            } // for *	        return;	       } // if malloc	    else	       printf("Overflow error 100 in BTree_Insert\a\n"), 	               exit (100);	   	taller = _insert (tree,       tree->root, 	                  dataInPtr, &upEntry);	if (taller)	   {	    // Tree has grown. Create new root 	    newPtr = (NODE*)malloc(sizeof(NODE));	    if (newPtr)	       {	        newPtr->entries[0]    = upEntry;	        newPtr->firstPtr      = tree->root;	        newPtr->numEntries    = 1;	        tree->root            = newPtr;	       } // if newPtr	    else	       printf("Overflow error 101\a\n"), 	               exit (100);	   } // if taller 	(tree->count)++;	return;}  // BTree_Insert 