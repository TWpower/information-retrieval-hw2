/*	================= _borrowRight ================ 	Root left subtree underflow. Borrow from right 	and rotate. 	   Pre    root is parent node to underflow node	          entryNdx is parent entry	          leftTreePtr is underflowed subtree 	          rightTreePtr is subtree w/ extra entry	   Post   Underflow corrected*/void _borrowRight (NODE* root,                   int   entryNdx,                    NODE* leftTreePtr,                    NODE* rightTreePtr){//	Local Definitions 	int toNdx;	int shifter;//	Statements 	// Move parent and subtree pointer to left tree 	toNdx = leftTreePtr->numEntries;	leftTreePtr->entries[toNdx].dataPtr	      = root->entries[entryNdx].dataPtr;	leftTreePtr->entries[toNdx].rightPtr 	      = rightTreePtr->firstPtr;	++leftTreePtr->numEntries;		// Move right data to parent 	root->entries[entryNdx].dataPtr	      = rightTreePtr->entries[0].dataPtr;		// Set right tree first pointer. Shift entries left 	rightTreePtr->firstPtr 	      = rightTreePtr->entries[0].rightPtr;	shifter = 0;	while (shifter < rightTreePtr->numEntries - 1)	   {	    rightTreePtr->entries[shifter] 	          = rightTreePtr->entries[shifter + 1];	    ++shifter;	   } // while 	--rightTreePtr->numEntries;	return;}	// _borrowRight 