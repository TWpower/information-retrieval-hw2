/*	=================== _deleteMid =================== 	Deletes entry from internal node in B-Tree 	   Pre    Tree initialized--null tree OK 	          node points to node data to be deleted 	          subtreePtr is pointer to root's subtree 	          entryNdx is entry to be deleted 	   Post   predecessor's data replaces delete data	          predecessor deleted from tree	   Return underflow true / false */bool _deleteMid   (NODE* root,                   int   entryNdx,                    NODE* subtreePtr){//	Local Definitions 	int  dltNdx;	int  rightNdx;	bool underflow;	//	Statements 	if (subtreePtr->firstPtr == NULL)	    {	    // leaf located. Exchange data & delete leaf 	     dltNdx = subtreePtr->numEntries - 1;	     root->entries[entryNdx].dataPtr =	           subtreePtr->entries[dltNdx].dataPtr;	     --subtreePtr->numEntries;	     underflow  = subtreePtr->numEntries < MIN_ENTRIES;	    } // if leaf 	else	   {	    // Not located. Traverse right for predecessor 	    rightNdx  = subtreePtr->numEntries - 1;	    underflow = _deleteMid (root, entryNdx,	           subtreePtr->entries[rightNdx].rightPtr);	    if (underflow)	       underflow = _reFlow (subtreePtr, rightNdx);	   } // else traverse right 	return underflow;}	// _deleteMid 